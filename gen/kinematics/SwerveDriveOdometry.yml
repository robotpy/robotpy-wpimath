---

classes:
  SwerveDriveOdometry:
    force_no_trampoline: true
    template_params:
    - size_t NumModules
    methods:
      SwerveDriveOdometry:
      ResetPosition:
        param_override:
          gyroAngle:
            ignore: true
          modulePositions:
            ignore: true
          pose:
            ignore: true
        cpp_code: |
          []() {
            if constexpr (NumModules == 2) {
              return [](SwerveDriveOdometry<NumModules> * self,
                        const Rotation2d& gyroAngle, const Pose2d& pose,
                        SwerveModulePosition s1, SwerveModulePosition s2) {
                self->ResetPosition(gyroAngle, {s1, s2}, pose);
              };
            } else if constexpr (NumModules == 3) {
              return [](SwerveDriveOdometry<NumModules> * self,
                        const Rotation2d& gyroAngle, const Pose2d& pose,
                        SwerveModulePosition s1, SwerveModulePosition s2, SwerveModulePosition s3) {
                self->ResetPosition(gyroAngle, {s1, s2, s3}, pose);
              };
            } else if constexpr (NumModules == 4) {
              return [](SwerveDriveOdometry<NumModules> * self,
                        const Rotation2d& gyroAngle, const Pose2d& pose,
                        SwerveModulePosition s1, SwerveModulePosition s2,
                        SwerveModulePosition s3, SwerveModulePosition s4) {
                self->ResetPosition(gyroAngle, {s1, s2, s3, s4}, pose);
              };
            } else if constexpr (NumModules == 6) {
              return [](SwerveDriveOdometry<NumModules> * self,
                        const Rotation2d& gyroAngle, const Pose2d& pose,
                        SwerveModulePosition s1, SwerveModulePosition s2,
                        SwerveModulePosition s3, SwerveModulePosition s4,
                        SwerveModulePosition s5, SwerveModulePosition s6) {
                self->ResetPosition(gyroAngle, {s1, s2, s3, s4, s5, s6}, pose);
              };
            }
          }()
      GetPose:
      Update:
        param_override:
          gyroAngle:
            ignore: true
          modulePositions:
            ignore: true
        cpp_code: |
          []() {
            if constexpr (NumModules == 2) {
              return [](SwerveDriveOdometry<NumModules> * self, const Rotation2d& gyroAngle,
                        SwerveModulePosition s1, SwerveModulePosition s2) {
                return self->Update(gyroAngle, {s1, s2});
              };
            } else if constexpr (NumModules == 3) {
              return [](SwerveDriveOdometry<NumModules> * self, const Rotation2d& gyroAngle,
                        SwerveModulePosition s1, SwerveModulePosition s2, SwerveModulePosition s3) {
                return self->Update(gyroAngle, {s1, s2, s3});
              };
            } else if constexpr (NumModules == 4) {
              return [](SwerveDriveOdometry<NumModules> * self, const Rotation2d& gyroAngle,
                        SwerveModulePosition s1, SwerveModulePosition s2,
                        SwerveModulePosition s3, SwerveModulePosition s4) {
                return self->Update(gyroAngle, {s1, s2, s3, s4});
              };
            } else if constexpr (NumModules == 6) {
              return [](SwerveDriveOdometry<NumModules> * self, const Rotation2d& gyroAngle,
                        SwerveModulePosition s1, SwerveModulePosition s2,
                        SwerveModulePosition s3, SwerveModulePosition s4,
                        SwerveModulePosition s5, SwerveModulePosition s6) {
                return self->Update(gyroAngle, {s1, s2, s3, s4, s5, s6});
              };
            }
          }()
templates:
  SwerveDrive2Odometry:
    qualname: frc::SwerveDriveOdometry
    params:
    - 2
  SwerveDrive3Odometry:
    qualname: frc::SwerveDriveOdometry
    params:
    - 3
  SwerveDrive4Odometry:
    qualname: frc::SwerveDriveOdometry
    params:
    - 4
  SwerveDrive6Odometry:
    qualname: frc::SwerveDriveOdometry
    params:
    - 6
