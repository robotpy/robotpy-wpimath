---

classes:
  SwerveDriveKinematics:
    shared_ptr: false
    template_params:
    - size_t NumModules
    methods:
      SwerveDriveKinematics:
        overloads:
          Translation2d, Wheels&&...:
            ignore: true
          const wpi::array<Translation2d, NumModules>&:
            ignore: true

      ToSwerveModuleStates:
        doc: |
          Performs inverse kinematics to return the module states from a desired
          chassis velocity. This method is often used to convert joystick values into
          module speeds and angles.

          This function also supports variable centers of rotation. During normal
          operations, the center of rotation is usually the same as the physical
          center of the robot; therefore, the argument is defaulted to that use case.
          However, if you wish to change the center of rotation for evasive
          maneuvers, vision alignment, or for any other use case, you can do so.

          :param chassisSpeeds:    The desired chassis speed.
          :param centerOfRotation: The center of rotation. For example, if you set the
           center of rotation at one corner of the robot and provide a chassis speed
           that only has a dtheta component, the robot will rotate around that corner.

          :returns: An array containing the module states. Use caution because these
                    module states are not normalized. Sometimes, a user input may cause one of
                    the module speeds to go above the attainable max velocity. Use the
                    :meth:`desaturateWheelSpeeds` function to rectify this issue.
                    In addition, you can use Python unpacking syntax
                    to directly assign the module states to variables::

                      fl, fr, bl, br = kinematics.toSwerveModuleStates(chassisSpeeds)

      ToChassisSpeeds:
        overloads:
          ModuleStates&&... [const]:
            param_override:
              wheelStates:
                ignore: true
            cpp_code: |
              []() {
                if constexpr (NumModules == 2) {
                  return [](SwerveDriveKinematics<NumModules> *self, SwerveModuleState p0, SwerveModuleState p1) {
                    return self->ToChassisSpeeds(p0, p1);
                  };
                } else if constexpr (NumModules == 3) {
                  return [](SwerveDriveKinematics<NumModules> *self, SwerveModuleState p0, SwerveModuleState p1, SwerveModuleState p2) {
                    return self->ToChassisSpeeds(p0, p1, p2);
                  };
                } else if constexpr (NumModules == 4) {
                  return [](SwerveDriveKinematics<NumModules> *self, SwerveModuleState p0, SwerveModuleState p1,
                    SwerveModuleState p2, SwerveModuleState p3) {
                    return self->ToChassisSpeeds(p0, p1, p2, p3);
                  };
                } else if constexpr (NumModules == 6) {
                  return [](SwerveDriveKinematics<NumModules> *self,
                    SwerveModuleState p0, SwerveModuleState p1, SwerveModuleState p2,
                    SwerveModuleState p3, SwerveModuleState p4, SwerveModuleState p5) {
                    return self->ToChassisSpeeds(p0, p1, p2, p3, p4, p5);
                  };
                }
              }()
          wpi::array<SwerveModuleState, NumModules> [const]:
            ignore: true
      ToTwist2d:
        overloads:
          ModuleDeltas&&... [const]:
            param_override:
              wheelDeltas:
                ignore: true
            cpp_code: |
              []() {
                if constexpr (NumModules == 2) {
                  return [](SwerveDriveKinematics<NumModules> *self, SwerveModulePosition p0, SwerveModulePosition p1) {
                    return self->ToTwist2d(p0, p1);
                  };
                } else if constexpr (NumModules == 3) {
                  return [](SwerveDriveKinematics<NumModules> *self, SwerveModulePosition p0, SwerveModulePosition p1, SwerveModulePosition p2) {
                    return self->ToTwist2d(p0, p1, p2);
                  };
                } else if constexpr (NumModules == 4) {
                  return [](SwerveDriveKinematics<NumModules> *self, SwerveModulePosition p0, SwerveModulePosition p1,
                    SwerveModulePosition p2, SwerveModulePosition p3) {
                    return self->ToTwist2d(p0, p1, p2, p3);
                  };
                } else if constexpr (NumModules == 6) {
                  return [](SwerveDriveKinematics<NumModules> *self,
                    SwerveModulePosition p0, SwerveModulePosition p1, SwerveModulePosition p2,
                    SwerveModulePosition p3, SwerveModulePosition p4, SwerveModulePosition p5) {
                    return self->ToTwist2d(p0, p1, p2, p3, p4, p5);
                  };
                }
              }()
          wpi::array<SwerveModulePosition, NumModules> [const]:
            ignore: true
      DesaturateWheelSpeeds:
        overloads:
          wpi::array<SwerveModuleState, NumModules>*, units::meters_per_second_t:
            cpp_code: |
              [](wpi::array<SwerveModuleState, NumModules> moduleStates, units::meters_per_second_t attainableMaxSpeed) {
                frc::SwerveDriveKinematics<NumModules>::DesaturateWheelSpeeds(&moduleStates, attainableMaxSpeed);
                return moduleStates;
              }
          ? wpi::array<SwerveModuleState, NumModules>*, ChassisSpeeds, units::meters_per_second_t,
            units::meters_per_second_t, units::radians_per_second_t
          :
            cpp_code: |
              [](wpi::array<SwerveModuleState, NumModules> moduleStates,
                  ChassisSpeeds currentChassisSpeed,
                  units::meters_per_second_t attainableMaxModuleSpeed,
                  units::meters_per_second_t attainableMaxRobotTranslationSpeed,
                  units::radians_per_second_t attainableMaxRobotRotationSpeed) {
                frc::SwerveDriveKinematics<NumModules>::DesaturateWheelSpeeds(&moduleStates, currentChassisSpeed, attainableMaxModuleSpeed, attainableMaxRobotTranslationSpeed, attainableMaxRobotRotationSpeed);
                return moduleStates;
              }

    template_inline_code: |
      if constexpr (NumModules == 2) {
        cls_SwerveDriveKinematics.def(py::init<Translation2d, Translation2d>());
      } else if constexpr (NumModules == 3) {
        cls_SwerveDriveKinematics.def(py::init<Translation2d, Translation2d, Translation2d>());
      } else if constexpr (NumModules == 4) {
        cls_SwerveDriveKinematics.def(py::init<Translation2d, Translation2d, Translation2d, Translation2d>());
      } else if constexpr (NumModules == 6) {
        cls_SwerveDriveKinematics.def(py::init<Translation2d, Translation2d, Translation2d, Translation2d, Translation2d, Translation2d>());
      }
  

templates:
  SwerveDrive2Kinematics:
    qualname: frc::SwerveDriveKinematics
    params:
    - 2
  SwerveDrive3Kinematics:
    qualname: frc::SwerveDriveKinematics
    params:
    - 3
  SwerveDrive4Kinematics:
    qualname: frc::SwerveDriveKinematics
    params:
    - 4
  SwerveDrive6Kinematics:
    qualname: frc::SwerveDriveKinematics
    params:
    - 6
