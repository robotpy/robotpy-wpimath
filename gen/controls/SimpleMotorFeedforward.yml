---

extra_includes:
- units/dimensionless.h

classes:
  SimpleMotorFeedforward:
    shared_ptr: true
    force_type_casters:
    - units::meters_per_second
    - units::meters_per_second_squared
    - units::radians_per_second
    - units::radians_per_second_squared
    typealias:
    - typename frc::SimpleMotorFeedforward<Distance>::Velocity
    - typename frc::SimpleMotorFeedforward<Distance>::Acceleration
    - typename frc::SimpleMotorFeedforward<Distance>::kv_unit
    - typename frc::SimpleMotorFeedforward<Distance>::ka_unit
    template_params:
    - Distance
    methods:
      SimpleMotorFeedforward:
        overloads:
          "":
          units::volt_t, units::unit_t<kv_unit>, units::unit_t<ka_unit>:
      Calculate:
        overloads:
          units::unit_t<Velocity>, units::unit_t<Acceleration> [const]:
          units::unit_t<Velocity>, units::unit_t<Velocity>, units::second_t [const]:
      MaxAchievableVelocity:
      MinAchievableVelocity:
      MaxAchievableAcceleration:
      MinAchievableAcceleration:
    template_inline_code: |
      cls_SimpleMotorFeedforward
        .def_readwrite("kS", &SimpleMotorFeedforward<Distance>::kS)
        .def_readwrite("kV", &SimpleMotorFeedforward<Distance>::kV)
        .def_readwrite("kA", &SimpleMotorFeedforward<Distance>::kA);

templates:
  # Unfortunately this is broken because calculate requires an SI unit
  # SimpleMotorFeedforward:
  #   qualname: frc::SimpleMotorFeedforward
  #   subpackage: controller
  #   params:
  #     - units::dimensionless::scalar

  SimpleMotorFeedforwardMeters:
    qualname: frc::SimpleMotorFeedforward
    subpackage: controller
    params:
      - units::meter

  SimpleMotorFeedforwardRadians:
    qualname: frc::SimpleMotorFeedforward
    subpackage: controller
    params:
      - units::radian
